package camptimetest;

import camptimetest.rest.MyUserRepository;
import com.google.common.base.Charsets;
import restx.factory.Module;
import restx.factory.Provides;
import restx.mongo.MongoModule;
import restx.security.*;

import javax.inject.Named;

/**
 * AppModule is for configuring user authentication as well as resource injection with @Provides
 * annotation for methods
 *
 * @Provides designates method as creator of resource when annotated to be injected elsewhere
 */
@Module
public class AppModule {

    @Provides //signaturekey is used to sign cookies for security and session management
    public SignatureKey signatureKey(){
        return new SignatureKey(("$2a$10$XO5aV08eELdWCvskS2r53.9tdVOHk3QJaWKYnS0hDOjZaGFALsDKq " +
                "camptimetest camptimetest").getBytes(Charsets.UTF_8)); //code generated by restx hashing tool
    } //use hash md5+bcrypt StringToHash to get hashcode for passwords and authentication

    //tiers of permissions for user
    public static final class Roles {
        public static final String ADMIN = "admin";
    }
    //provides database name for behind the scenes injection and connection. Oddly don't have to specify port number
    //or anything else
    //@Named names injection to be addressed later, if class is unique like SignatureKey compiler will know to use that
    //@Provides method, however in this case since it is just a string it should be named
    @Provides @Named(MongoModule.MONGO_DB_NAME)
    public String dbName(){
        return "camptimetest";}

    @Provides @Named("credentialsStrategy")//way of comparing/hashing credentials/passwords
    public CredentialsStrategy credentialsStrategy(){
        return new BCryptCredentialsStrategy();
    }


    @Provides //create our principal authenticator for checking permission levels,
    //and authenticating users
    public BasicPrincipalAuthenticator basicPrincipalAuthenticator(
            MyUserRepository userRepository, SecuritySettings securitySettings,
            CredentialsStrategy credentialsStrategy,
            @Named("restx.admin.passwordHash") String adminPasswordHash) {
        return new StdBasicPrincipalAuthenticator(
                new StdUserService<>(userRepository, credentialsStrategy, adminPasswordHash), securitySettings);
    }

}
